// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum OrderStates {
  MODIFYING
  PAYMENT_ADDED
  PAYMENT_AUTHORIZED
  SHIPPED
  DELIVERED
}

model Product {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  name            String   @db.VarChar(255)
  slug            String   @unique @db.VarChar(255)
  sku             String   @db.VarChar(255)
  description     String?
  image           String?  @db.VarChar(255)
  /// The actual price of the product
  price           Decimal  @default(0) @db.Decimal(10, 2)
  /// Price for illustrative purposes, usually shown crossed out
  comparisonPrice Decimal? @map("comparison_price") @db.Decimal(10, 2)
  weight          Decimal? @db.Decimal(8, 2)
  stock           Int
  enabled         Boolean  @default(true)

  // relations
  categories ProductOnCategory[]
  lines      OrderLine[]

  @@map("product")
}

model Category {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String   @db.VarChar(255)
  slug        String   @unique @db.VarChar(255)
  description String?
  image       String?  @db.VarChar(255)
  enabled     Boolean  @default(true)

  // relations
  products ProductOnCategory[]

  @@map("collection")
}

model ProductOnCategory {
  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @map("product_id")
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @map("category_id")

  @@id([productId, categoryId])
}

model OrderLine {
  id        String   @id @default(uuid())
  ceatedAt  DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  /// Unit price of the product of the current line
  unitPrice Decimal  @map("unit_price") @db.Decimal(10, 2)
  quantity  Int      @db.SmallInt
  /// Unit price muliplied by quantity
  linePrice Decimal  @map("line_price") @db.Decimal(10, 2)

  // relations
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @map("order_id")
  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  @@map("order_line")
}

model Order {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  /// order code generated by ours
  code          String      @db.Char(16)
  state         OrderStates @default(MODIFYING)
  /// The price that will be sent to the payment provider. subtotal plus shipping price
  total         Decimal     @db.Decimal(10, 2)
  /// order lines total less discounts
  subtotal      Decimal     @db.Decimal(10, 2)
  /// The date and time when a payment has been addet to the order
  colocatedAt   DateTime    @map("colocated_at")
  /// Total product quantity
  totalQuantity Int         @map("total_quantity")

  // relations
  lines OrderLine[]

  // relations
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @map("customer_id")

  @@map("order")
}

model Customer {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  firstName        String?  @map("first_name") @db.VarChar(255)
  lastName         String   @map("last_name") @db.VarChar(255)
  email            String   @db.VarChar(255)
  phoneNumber      String?  @map("phone_number") @db.VarChar(15)
  phoneCountryCode String?  @map("phone_country_code") @db.Char(2)
  enabled          Boolean  @default(true)

  // relations
  orders  Order[]
  address Address[]

  @@map("cusotmer")
}

model Address {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  streetLine1      String   @map("street_line_1") @db.VarChar(255)
  streetLine2      String?  @map("street_line_2") @db.VarChar(255)
  // colonia
  suburb           String   @db.VarChar(255)
  city             String   @db.VarChar(255)
  // estado
  province         String   @db.VarChar(255)
  country          String   @db.VarChar(255)
  phoneNumber      String?  @map("phone_number") @db.VarChar(255)
  // +52
  phoneCountryCode String?  @map("phone_country_code") @db.Char(2)
  postalCode       String   @map("postal_code") @db.Char(10)
  references       String?

  // relations
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @map("customer_id")

  @@map("address")
}

/// Shipment object of the order, only 1 on 1
/// Needed because we have to store the shipping price of the order at the time was payed
model Shipment {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  trackingCode String   @map("tracking_code") @db.VarChar(255)
  amount       Decimal  @db.Decimal(10, 2)

  // relations
  shipmentMethod   ShipmentMethod @relation(fields: [shipmentMethodId], references: [id])
  shipmentMethodId String         @map("shipment_method_id")

  @@map("shipment")
}

model ShipmentMethod {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String   @db.VarChar(255)
  description String?
  price       Decimal  @db.Decimal(10, 2)
  carrier     String   @db.VarChar(255)
  enabled     Boolean  @default(true)

  // relations
  shipments Shipment[]

  @@map("shipment_method")
}

/// Payment object of the order, only 1 on 1
/// Needed because we have to store the price of the order at the time was payed
model Payment {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  transactionId String   @map("transaction_id") @db.VarChar(255)
  amount        Decimal  @db.Decimal(10, 2)

  // relations
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String        @map("payment_method_id")

  @@map("payment")
}

model PaymentMethod {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String   @db.VarChar(255)
  description String?
  enabled     Boolean  @default(true)

  // relations
  payments Payment[]

  // relations
  paymentProvider   PaymentProvider @relation(fields: [paymentProviderId], references: [id])
  paymentProviderId String          @map("payment_provider_id")

  @@map("payment_method")
}

/// ex. Stripe, PayPal
model PaymentProvider {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String   @db.VarChar(255)
  description String?
  image       String   @db.VarChar(255)
  enabled     Boolean  @default(true)

  // relations
  paymentMethods  PaymentMethod[]
  integrationKeys IntegrationKey[]

  @@map("payment_provider")
}

model IntegrationKey {
  id    String @id @default(uuid())
  key   String @db.VarChar(255)
  value String

  // relations
  paymentProvider   PaymentProvider @relation(fields: [paymentProviderId], references: [id])
  paymentProviderId String          @map("provider_id")

  @@map("integration_key")
}

model Administrator {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  username  String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)

  @@map("administrator")
}
